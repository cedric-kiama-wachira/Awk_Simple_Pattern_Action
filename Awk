#!/bin/bash

# Using a single pattern action statement to retrieve data for each employee that didnt work
# Column one of the Employees.data file contains Employee's name
# Columne two of the Employees.data file contains Dollars per hour rate
# Columnt three of the Employees.data file contains the No of Hours worked
# Contents of the data file as shown below:
#
# Beth    4.00    0
# Dan     3.75    0
# Kathy   4.00    10
# Mark    5.00    20
# Mary    5.50    22
# Susie   4.25    18

# Now I want to print the name and pay (rate times hours) for everyone who worked more than zero hours.
awk '$3 > 0 { print $1, $2 * $3 }' Employees.data

# Now I want to print the names of those employees who did not work.
awk '$3 == 0 { print $1 }' Employees.data

# Now let me omit the action  and maintain only the pattern
awk '$3 == 0 ' Employees.data

# Now let me omit the pattern  and maintain only the action only
awk '{ print $1 }' Employees.data

# Now lets omit the input file from the program
awk '$3 == 0 { print $1 }'

# Now lets print the whole line
awk '$3 == 0 { print $0 }' Employees.data

# Or its the same as
awk '$3 == 0 { print }' Employees.data

# Now lets add a line number using NR variable to make the output more pretty
awk '$3 == 0 { print NR, $0 }' Employees.data

# The NF variable is used to print the specified field to be out put

awk '{ print NR, NF, $1, $NF }' Employees.data

# Putting Text in the Output
awk '{ print "total pay for", $1, "is", $2 * $3 }' Employees.data

# Fancier output using printf
awk '{ printf("total pay for %s this month is $%.2f\n", $1, $2 * $3) }' Employees.data

# More fanciness with printf
awk '{ printf("%-8s $%6.2f\n", $1, $2 * $3) }' Employees.data

# Adding text to above to make it more readable
awk '{ printf("total pay for %-8s is $%6.2f\n", $1, $2 * $3) }' Employees.data

# Introducing Sorting and pipes THIS ONE NEEDS MORE WORK AND ATTENTION
awk '{ printf("%6.2f %s\n", $2 * $3, $0) }' Employees.data | sort

# Adding Selection Option
awk '$2 >= 5 { printf("$%.2f for %s\n", $2 * $3, $1) }' Employees.data
awk '$2 >= 5 { print $0 }' Employees.data

awk '$2 * $3 > 50 { printf("$%.2f for %s\n", $2 * $3, $1) }' Employees.data

# Get text only
awk '$1 == "Susie" { print $0 }' Employees.data

# Awk using regular expressions
awk ' /Susie/ { print $0 }' Employees.data

# Combination of Patterns
awk '$2 >= 4 || $3 >= 20 { print  $0 }' Employees.data

